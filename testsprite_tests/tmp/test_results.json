[
  {
    "projectId": "3c97fba0-c470-49a2-aa14-0c596b2079c1",
    "testId": "27153bc4-408b-46df-9890-8897ee63048b",
    "userId": "7408e418-a031-702d-faaa-33b4434b698b",
    "title": "TC001-create_new_order",
    "description": "Verify that a new order can be created successfully with valid cart, billing information, payment method, and totals. Validate the response status and order creation confirmation.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5174\"\nTIMEOUT = 30\n\ndef test_create_new_order():\n    url = f\"{BASE_URL}/api/orders\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    payload = {\n        \"cart\": [\n            {\n                \"itemId\": \"item123\",\n                \"name\": \"Resume Template A\",\n                \"quantity\": 1,\n                \"price\": 29.99\n            }\n        ],\n        \"billingInfo\": {\n            \"firstName\": \"John\",\n            \"lastName\": \"Doe\",\n            \"address\": \"123 Main St\",\n            \"city\": \"Anytown\",\n            \"state\": \"CA\",\n            \"zip\": \"90210\",\n            \"country\": \"USA\",\n            \"email\": \"john.doe@example.com\",\n            \"phone\": \"555-123-4567\"\n        },\n        \"paymentMethod\": \"credit_card\",\n        \"totals\": {\n            \"subtotal\": 29.99,\n            \"tax\": 2.40,\n            \"shipping\": 0,\n            \"total\": 32.39\n        }\n    }\n\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Validate that response contains confirmation of order creation\n    # Since PRD does not specify response body, check at least presence of some keys or success indication\n    # Here we check that response JSON is a dict and not empty\n    assert isinstance(data, dict), \"Response JSON is not an object\"\n    assert data, \"Response JSON is empty, expected order creation confirmation\"\n\ntest_create_new_order()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 42, in test_create_new_order\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 500 Server Error: Internal Server Error for url: http://localhost:5174/api/orders\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 58, in <module>\n  File \"<string>\", line 44, in test_create_new_order\nAssertionError: Request failed: 500 Server Error: Internal Server Error for url: http://localhost:5174/api/orders\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T07:14:09.642Z",
    "modified": "2025-07-24T07:14:35.779Z"
  },
  {
    "projectId": "3c97fba0-c470-49a2-aa14-0c596b2079c1",
    "testId": "3556735a-cdc8-4201-b42d-fc573516425d",
    "userId": "7408e418-a031-702d-faaa-33b4434b698b",
    "title": "TC002-get_order_by_id",
    "description": "Test retrieval of order details by order ID. Ensure the API returns correct order information for a valid ID and handles invalid or non-existent IDs appropriately.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:5174\"\nTIMEOUT = 30\nHEADERS = {\n    \"Content-Type\": \"application/json\"\n}\n\ndef test_get_order_by_id():\n    order_id = None\n    # Sample payload to create an order\n    create_order_payload = {\n        \"cart\": [\n            {\"itemId\": \"item1\", \"quantity\": 2, \"price\": 10.0},\n            {\"itemId\": \"item2\", \"quantity\": 1, \"price\": 20.0}\n        ],\n        \"billingInfo\": {\n            \"name\": \"John Doe\",\n            \"address\": \"123 Main St\",\n            \"city\": \"Anytown\",\n            \"postalCode\": \"12345\",\n            \"country\": \"USA\"\n        },\n        \"paymentMethod\": \"credit_card\",\n        \"totals\": {\n            \"subtotal\": 40.0,\n            \"tax\": 3.2,\n            \"total\": 43.2\n        }\n    }\n\n    try:\n        # Create a new order to get a valid order ID\n        create_resp = requests.post(\n            f\"{BASE_URL}/api/orders\",\n            json=create_order_payload,\n            headers=HEADERS,\n            timeout=TIMEOUT\n        )\n        assert create_resp.status_code == 200, f\"Order creation failed: {create_resp.text}\"\n        create_resp_json = create_resp.json()\n        # Expecting the response to contain the created order ID\n        # If the API returns the order ID in a field, extract it; else fallback to None\n        order_id = create_resp_json.get(\"id\") or create_resp_json.get(\"orderId\") or create_resp_json.get(\"order_id\")\n        assert order_id is not None, \"Created order ID not found in response\"\n\n        # Test retrieval of order details by valid order ID\n        get_resp = requests.get(\n            f\"{BASE_URL}/api/orders/{order_id}\",\n            headers=HEADERS,\n            timeout=TIMEOUT\n        )\n        assert get_resp.status_code == 200, f\"Failed to get order by valid ID: {get_resp.text}\"\n        order_data = get_resp.json()\n        # Validate returned order data matches what was created (at least some fields)\n        assert \"cart\" in order_data and isinstance(order_data[\"cart\"], list), \"Order cart missing or invalid\"\n        assert \"billingInfo\" in order_data and isinstance(order_data[\"billingInfo\"], dict), \"Order billingInfo missing or invalid\"\n        assert order_data.get(\"paymentMethod\") == create_order_payload[\"paymentMethod\"], \"Payment method mismatch\"\n        assert \"totals\" in order_data and isinstance(order_data[\"totals\"], dict), \"Order totals missing or invalid\"\n\n        # Test retrieval with invalid order ID (random UUID)\n        invalid_id = str(uuid.uuid4())\n        invalid_resp = requests.get(\n            f\"{BASE_URL}/api/orders/{invalid_id}\",\n            headers=HEADERS,\n            timeout=TIMEOUT\n        )\n        # Expecting 404 or 400 or some error status for non-existent order\n        assert invalid_resp.status_code in (400, 404), f\"Unexpected status for invalid order ID: {invalid_resp.status_code}\"\n\n        # Test retrieval with malformed order ID (empty string)\n        malformed_resp = requests.get(\n            f\"{BASE_URL}/api/orders/\",\n            headers=HEADERS,\n            timeout=TIMEOUT\n        )\n        # This should return 404 or 405 (method not allowed) or similar error\n        assert malformed_resp.status_code in (404, 405), f\"Unexpected status for malformed order ID request: {malformed_resp.status_code}\"\n\n    finally:\n        # Cleanup: delete the created order if possible\n        if order_id:\n            try:\n                requests.delete(\n                    f\"{BASE_URL}/api/orders/{order_id}\",\n                    headers=HEADERS,\n                    timeout=TIMEOUT\n                )\n            except Exception:\n                pass\n\ntest_get_order_by_id()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 93, in <module>\n  File \"<string>\", line 41, in test_get_order_by_id\nAssertionError: Order creation failed: \n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T07:14:09.648Z",
    "modified": "2025-07-24T07:14:39.398Z"
  },
  {
    "projectId": "3c97fba0-c470-49a2-aa14-0c596b2079c1",
    "testId": "a683dc55-0b83-490d-baae-b2153b7215b1",
    "userId": "7408e418-a031-702d-faaa-33b4434b698b",
    "title": "TC003-get_user_orders",
    "description": "Verify that the API returns a list of orders associated with the authenticated user. Confirm correct response structure and data consistency.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5174\"\nTIMEOUT = 30\n\n# Replace with a valid token for authenticated user\nAUTH_TOKEN = \"Bearer your_valid_jwt_token_here\"\n\ndef test_get_user_orders():\n    url = f\"{BASE_URL}/api/user/orders\"\n    headers = {\n        \"Authorization\": AUTH_TOKEN,\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    try:\n        orders = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(orders, list), f\"Expected response to be a list, got {type(orders)}\"\n\n    # Optional: Validate structure of each order if any orders exist\n    if orders:\n        for order in orders:\n            assert isinstance(order, dict), f\"Each order should be a dict, got {type(order)}\"\n            # Check for some expected keys in order object (common keys from create order schema)\n            expected_keys = {\"cart\", \"billingInfo\", \"paymentMethod\", \"totals\"}\n            assert expected_keys.intersection(order.keys()), f\"Order missing expected keys: {expected_keys}\"\n\ntest_get_user_orders()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 17, in test_get_user_orders\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 500 Server Error: Internal Server Error for url: http://localhost:5174/api/user/orders\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 38, in <module>\n  File \"<string>\", line 19, in test_get_user_orders\nAssertionError: Request failed: 500 Server Error: Internal Server Error for url: http://localhost:5174/api/user/orders\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T07:14:09.652Z",
    "modified": "2025-07-24T07:14:36.962Z"
  },
  {
    "projectId": "3c97fba0-c470-49a2-aa14-0c596b2079c1",
    "testId": "17259ac3-8cc6-4447-bdcc-bd76bb55d507",
    "userId": "7408e418-a031-702d-faaa-33b4434b698b",
    "title": "TC004-get_all_users_admin_only",
    "description": "Test that the admin-only endpoint returns a paginated list of users. Validate query parameters for pagination and search, and ensure access control restricts non-admin users.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5174\"\nTIMEOUT = 30\n\n# Example tokens for authentication (replace with valid tokens)\nADMIN_AUTH_TOKEN = \"Bearer admin_valid_jwt_token\"\nNON_ADMIN_AUTH_TOKEN = \"Bearer non_admin_valid_jwt_token\"\n\ndef test_get_all_users_admin_only():\n    headers_admin = {\n        \"Authorization\": ADMIN_AUTH_TOKEN,\n        \"Accept\": \"application/json\"\n    }\n    headers_non_admin = {\n        \"Authorization\": NON_ADMIN_AUTH_TOKEN,\n        \"Accept\": \"application/json\"\n    }\n\n    # Test parameters for pagination and search\n    params = {\n        \"page\": 1,\n        \"limit\": 5,\n        \"search\": \"testuser\"\n    }\n\n    # 1. Admin user should get paginated list of users with search applied\n    try:\n        response = requests.get(f\"{BASE_URL}/api/admin/users\", headers=headers_admin, params=params, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected 200 OK for admin, got {response.status_code}\"\n        data = response.json()\n        assert isinstance(data, dict) or isinstance(data, list), \"Response should be a dict or list\"\n        # If paginated, expect keys like 'users', 'page', 'limit', 'total' or similar\n        if isinstance(data, dict):\n            assert \"page\" in data or \"users\" in data or \"items\" in data, \"Paginated response missing expected keys\"\n        # If list, just check it's a list of users\n        if isinstance(data, list):\n            for user in data:\n                assert isinstance(user, dict), \"Each user entry should be a dict\"\n                # Optionally check user fields like id, username, email if present\n                assert \"id\" in user or \"username\" in user or \"email\" in user, \"User entry missing expected fields\"\n    except requests.RequestException as e:\n        assert False, f\"Admin request failed: {e}\"\n\n    # 2. Non-admin user should be denied access (403 or 401)\n    try:\n        response = requests.get(f\"{BASE_URL}/api/admin/users\", headers=headers_non_admin, params=params, timeout=TIMEOUT)\n        assert response.status_code in (401, 403), f\"Expected 401 or 403 for non-admin, got {response.status_code}\"\n    except requests.RequestException as e:\n        assert False, f\"Non-admin request failed: {e}\"\n\ntest_get_all_users_admin_only()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 52, in <module>\n  File \"<string>\", line 30, in test_get_all_users_admin_only\nAssertionError: Expected 200 OK for admin, got 500\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T07:14:09.657Z",
    "modified": "2025-07-24T07:14:39.388Z"
  },
  {
    "projectId": "3c97fba0-c470-49a2-aa14-0c596b2079c1",
    "testId": "0098d554-aac9-46ff-98a2-01deaa346890",
    "userId": "7408e418-a031-702d-faaa-33b4434b698b",
    "title": "TC005-get_user_permissions",
    "description": "Verify retrieval of user permissions and subscription tier information by user ID. Confirm correct permission data is returned for valid users.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5174\"\nTIMEOUT = 30\n\ndef test_get_user_permissions():\n    # First, get a valid user ID by fetching users from the admin endpoint (assuming admin access)\n    admin_users_url = f\"{BASE_URL}/api/admin/users\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(admin_users_url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n        users_data = response.json()\n        # Expecting users_data to have a list or paginated structure with users\n        # Try to extract a userId from the data\n        user_id = None\n        if isinstance(users_data, dict):\n            # Try common keys for user list\n            if \"users\" in users_data and isinstance(users_data[\"users\"], list) and len(users_data[\"users\"]) > 0:\n                user_id = users_data[\"users\"][0].get(\"id\") or users_data[\"users\"][0].get(\"userId\")\n            elif \"data\" in users_data and isinstance(users_data[\"data\"], list) and len(users_data[\"data\"]) > 0:\n                user_id = users_data[\"data\"][0].get(\"id\") or users_data[\"data\"][0].get(\"userId\")\n            else:\n                # fallback: try if the dict itself is a list of users\n                if isinstance(users_data, list) and len(users_data) > 0:\n                    user_id = users_data[0].get(\"id\") or users_data[0].get(\"userId\")\n        elif isinstance(users_data, list) and len(users_data) > 0:\n            user_id = users_data[0].get(\"id\") or users_data[0].get(\"userId\")\n\n        assert user_id is not None, \"No user ID found to test permissions retrieval\"\n\n    except requests.RequestException as e:\n        assert False, f\"Failed to get users for test setup: {e}\"\n\n    # Now test the permissions endpoint for the retrieved user ID\n    permissions_url = f\"{BASE_URL}/api/permissions/{user_id}\"\n    try:\n        resp = requests.get(permissions_url, headers=headers, timeout=TIMEOUT)\n        resp.raise_for_status()\n        data = resp.json()\n\n        # Validate that the response contains permission data and subscription tier info\n        assert isinstance(data, dict), \"Response is not a JSON object\"\n        # Check for keys that might represent permissions and subscription tier\n        # Since schema is not explicitly detailed, check for common keys\n        assert \"permissions\" in data or \"permission\" in data or \"roles\" in data, \"Permissions data missing in response\"\n        assert \"subscriptionTier\" in data or \"subscription\" in data or \"tier\" in data, \"Subscription tier info missing in response\"\n\n        # Permissions should be a list or dict with permission entries\n        permissions = data.get(\"permissions\") or data.get(\"permission\") or data.get(\"roles\")\n        assert permissions is not None, \"Permissions field is None\"\n        assert isinstance(permissions, (list, dict)), \"Permissions field is not list or dict\"\n\n    except requests.HTTPError as http_err:\n        assert False, f\"HTTP error occurred: {http_err}\"\n    except requests.RequestException as req_err:\n        assert False, f\"Request error occurred: {req_err}\"\n    except ValueError:\n        assert False, \"Response content is not valid JSON\"\n\ntest_get_user_permissions()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 14, in test_get_user_permissions\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 500 Server Error: Internal Server Error for url: http://localhost:5174/api/admin/users\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 63, in <module>\n  File \"<string>\", line 35, in test_get_user_permissions\nAssertionError: Failed to get users for test setup: 500 Server Error: Internal Server Error for url: http://localhost:5174/api/admin/users\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T07:14:09.662Z",
    "modified": "2025-07-24T07:14:36.999Z"
  },
  {
    "projectId": "3c97fba0-c470-49a2-aa14-0c596b2079c1",
    "testId": "87bb529c-9ca1-48c8-8d4d-be9beb27c739",
    "userId": "7408e418-a031-702d-faaa-33b4434b698b",
    "title": "TC006-check_specific_permission",
    "description": "Test the permission check API by submitting user ID, permission type, and optional resource ID. Validate the response indicates whether the user has the specified permission.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5174\"\nTIMEOUT = 30\n\ndef test_check_specific_permission():\n    # For testing, we need a valid userId.\n    # Since no userId is provided, create a new user first, then test permission check.\n    # After test, delete the created user.\n    # Assuming user registration endpoint: POST /api/auth/register with minimal required fields.\n    # The PRD does not specify user creation schema, so we will create a dummy user with email and password.\n    # Then use that userId for permission check.\n    # Finally, delete the user if possible (not specified in PRD, so skip deletion).\n    # If deletion is not possible, just run the test with created user.\n\n    register_url = f\"{BASE_URL}/api/auth/register\"\n    permission_check_url = f\"{BASE_URL}/api/permissions/check\"\n\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    user_data = {\n        \"email\": \"testuser_tc006@example.com\",\n        \"password\": \"TestPassword123!\"\n    }\n\n    user_id = None\n\n    try:\n        # Register user\n        resp = requests.post(register_url, json=user_data, headers=headers, timeout=TIMEOUT)\n        assert resp.status_code == 201, f\"User registration failed with status {resp.status_code}\"\n        resp_json = resp.json()\n        # Expecting userId in response, but PRD does not specify response schema for registration.\n        # Try to get userId from response, fallback to None.\n        user_id = resp_json.get(\"id\") or resp_json.get(\"userId\") or resp_json.get(\"uid\")\n        assert user_id is not None, \"User ID not found in registration response\"\n\n        # Test permission check with valid permission and no resourceId\n        payload = {\n            \"userId\": user_id,\n            \"permission\": \"CREATE_RESUME\"\n        }\n        resp = requests.post(permission_check_url, json=payload, headers=headers, timeout=TIMEOUT)\n        assert resp.status_code == 200, f\"Permission check failed with status {resp.status_code}\"\n        result = resp.json()\n        # The response should indicate whether user has the permission.\n        # Assuming response contains a boolean field like \"hasPermission\" or similar.\n        assert isinstance(result, dict), \"Permission check response is not a JSON object\"\n        assert \"hasPermission\" in result or \"allowed\" in result or \"granted\" in result, \\\n            \"Permission check response missing expected permission indicator\"\n\n        # Test permission check with resourceId included (optional)\n        payload_with_resource = {\n            \"userId\": user_id,\n            \"permission\": \"EXPORT_PDF\",\n            \"resourceId\": \"resource-123\"\n        }\n        resp = requests.post(permission_check_url, json=payload_with_resource, headers=headers, timeout=TIMEOUT)\n        assert resp.status_code == 200, f\"Permission check with resourceId failed with status {resp.status_code}\"\n        result_with_resource = resp.json()\n        assert isinstance(result_with_resource, dict), \"Permission check response with resourceId is not a JSON object\"\n        assert \"hasPermission\" in result_with_resource or \"allowed\" in result_with_resource or \"granted\" in result_with_resource, \\\n            \"Permission check response with resourceId missing expected permission indicator\"\n\n    finally:\n        # No delete user endpoint specified in PRD, so skipping user deletion.\n        pass\n\ntest_check_specific_permission()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 71, in <module>\n  File \"<string>\", line 33, in test_check_specific_permission\nAssertionError: User registration failed with status 500\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T07:14:09.667Z",
    "modified": "2025-07-24T07:14:39.397Z"
  },
  {
    "projectId": "3c97fba0-c470-49a2-aa14-0c596b2079c1",
    "testId": "a2733b53-c6f7-436b-85d6-b613c5951724",
    "userId": "7408e418-a031-702d-faaa-33b4434b698b",
    "title": "TC007-get_job_listings",
    "description": "Verify that the API returns a list of job listings. Confirm response status and data format.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5174\"\nTIMEOUT = 30\n\ndef test_get_job_listings():\n    url = f\"{BASE_URL}/api/jobs\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request to get job listings failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(data, list), f\"Expected response data to be a list, got {type(data)}\"\n\n    # Optionally check that each item in the list is a dict (job listing)\n    for job in data:\n        assert isinstance(job, dict), f\"Expected each job listing to be a dict, got {type(job)}\"\n\ntest_get_job_listings()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 13, in test_get_job_listings\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 500 Server Error: Internal Server Error for url: http://localhost:5174/api/jobs\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 30, in <module>\n  File \"<string>\", line 15, in test_get_job_listings\nAssertionError: Request to get job listings failed: 500 Server Error: Internal Server Error for url: http://localhost:5174/api/jobs\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T07:14:09.671Z",
    "modified": "2025-07-24T07:14:39.396Z"
  },
  {
    "projectId": "3c97fba0-c470-49a2-aa14-0c596b2079c1",
    "testId": "a85ef295-1cf1-4cd4-b7be-067cce3813fa",
    "userId": "7408e418-a031-702d-faaa-33b4434b698b",
    "title": "TC008-create_new_job",
    "description": "Test creation of a new job entry via the API. Validate response status and confirmation of job creation.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5174\"\nTIMEOUT = 30\n\ndef test_create_new_job():\n    url = f\"{BASE_URL}/api/jobs\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    # Example payload for creating a new job entry\n    payload = {\n        \"title\": \"Software Engineer\",\n        \"description\": \"Develop and maintain software applications.\",\n        \"location\": \"Remote\",\n        \"type\": \"Full-time\",\n        \"company\": \"TechCorp\",\n        \"salaryRange\": \"70000-90000\",\n        \"requirements\": [\n            \"3+ years experience in software development\",\n            \"Proficiency in Python and JavaScript\",\n            \"Experience with RESTful APIs\"\n        ]\n    }\n\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 201, f\"Expected status code 201, got {response.status_code}\"\n        json_response = response.json()\n        # Validate that the response contains confirmation of job creation\n        assert \"id\" in json_response or \"jobId\" in json_response or json_response != {}, \"Response does not confirm job creation\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_create_new_job()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 35, in <module>\n  File \"<string>\", line 28, in test_create_new_job\nAssertionError: Expected status code 201, got 500\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T07:14:09.676Z",
    "modified": "2025-07-24T07:14:40.774Z"
  },
  {
    "projectId": "3c97fba0-c470-49a2-aa14-0c596b2079c1",
    "testId": "b7f9d8ac-fbdf-4808-80c3-be1a2460f37d",
    "userId": "7408e418-a031-702d-faaa-33b4434b698b",
    "title": "TC009-get_skills_list",
    "description": "Verify retrieval of the skills list from the API. Confirm response status and data correctness.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5174\"\nTIMEOUT = 30\n\ndef test_get_skills_list():\n    url = f\"{BASE_URL}/api/skills\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request to get skills list failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Validate that data is a list (skills list)\n    assert isinstance(data, list), f\"Expected response data to be a list, got {type(data)}\"\n\n    # Optionally check that each item in the list is a dict with expected keys (if known)\n    # Since schema is not detailed, just check items are dicts if list not empty\n    if data:\n        assert all(isinstance(skill, dict) for skill in data), \"Each skill item should be a dictionary\"\n\ntest_get_skills_list()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 13, in test_get_skills_list\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 500 Server Error: Internal Server Error for url: http://localhost:5174/api/skills\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 32, in <module>\n  File \"<string>\", line 15, in test_get_skills_list\nAssertionError: Request to get skills list failed: 500 Server Error: Internal Server Error for url: http://localhost:5174/api/skills\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T07:14:09.681Z",
    "modified": "2025-07-24T07:14:47.070Z"
  },
  {
    "projectId": "3c97fba0-c470-49a2-aa14-0c596b2079c1",
    "testId": "b7fc6b1b-f3a3-481a-b918-94b6cc261ea9",
    "userId": "7408e418-a031-702d-faaa-33b4434b698b",
    "title": "TC010-add_new_skill",
    "description": "Test adding a new skill through the API. Validate response status and that the skill is correctly added to the database.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:5174\"\nTIMEOUT = 30\n\ndef test_add_new_skill():\n    url = f\"{BASE_URL}/api/skills\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    # Generate a unique skill name to avoid conflicts\n    skill_name = f\"TestSkill_{uuid.uuid4()}\"\n    payload = {\n        \"name\": skill_name\n    }\n\n    skill_id = None\n    try:\n        # Add new skill\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 201, f\"Expected status code 201, got {response.status_code}\"\n        response_data = response.json()\n        # Expecting the response to contain the created skill details including an id\n        assert \"id\" in response_data, \"Response JSON does not contain 'id'\"\n        assert response_data.get(\"name\") == skill_name, \"Skill name in response does not match the sent name\"\n        skill_id = response_data[\"id\"]\n\n        # Verify the skill is added by fetching the skills list\n        get_response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        assert get_response.status_code == 200, f\"Expected status code 200 on GET, got {get_response.status_code}\"\n        skills_list = get_response.json()\n        assert any(skill.get(\"id\") == skill_id and skill.get(\"name\") == skill_name for skill in skills_list), \"Added skill not found in skills list\"\n\n    finally:\n        # Cleanup: delete the skill if API supports deletion (not specified in PRD, so skip if no endpoint)\n        # Since no DELETE endpoint for skills is specified, no cleanup is performed.\n        pass\n\ntest_add_new_skill()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 40, in <module>\n  File \"<string>\", line 22, in test_add_new_skill\nAssertionError: Expected status code 201, got 500\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T07:14:09.685Z",
    "modified": "2025-07-24T07:14:41.888Z"
  }
]
